// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin-contracts/contracts/utils/Counters.sol"

contract GMB is ERC721URIStorage {

    adress owner;

    using counters for counters.counter;
    counters.counter private _tokenIds;

    constructor() ERC721("GMB_GENESIS", "GMB") {

    }

    mapping(address => bool) public issuedGMBs;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function issueGMB (address to) onlyowner external {
        issuedGMBs[to] = true;
     }

     function claimGMB(string memory tokenURI) public returns(uint256) {
         require(issueGMB[msg.sender], "GMB is not issued");

         _tokenIds.increment();
         uint256 newItemId = _tokenIds.current();
         _mint(msg.sender, newItemId);
         _setTokenURI(newItemId, tokenURI);
         perosnToGMB[msg.sender] = tokenURI;
         issuedGMBs[msg.sender] = false;

         return newItemId;
     }

     mapping(address => uint) personToGMB;
}

